name: Recursive Action Scanner

on:
  pull_request:
    paths:
      - '**/*.md'
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  scan-actions:
    runs-on: ubuntu-latest
    name: Scan Actions Recursively
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run recursive action scan
        id: scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running recursive action scanner..."
          node index.mjs scan-pr \
            --url "${{ github.server_url }}/${{ github.repository }}" \
            --pr "${{ github.event.pull_request.number }}" \
            --format json \
            --output scan-results.json
          
          # Check if results file exists and has content
          if [ -f scan-results.json ] && [ -s scan-results.json ]; then
            echo "scan_success=true" >> $GITHUB_OUTPUT
            echo "results_file=scan-results.json" >> $GITHUB_OUTPUT
          else
            echo "scan_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate summary report
        if: steps.scan.outputs.scan_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node index.mjs scan-pr \
            --url "${{ github.server_url }}/${{ github.repository }}" \
            --pr "${{ github.event.pull_request.number }}" \
            --format text \
            --output scan-summary.md

      - name: Comment scan results on PR
        if: steps.scan.outputs.scan_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the summary report
            let summaryContent = '';
            try {
              summaryContent = fs.readFileSync('scan-summary.md', 'utf8');
            } catch (e) {
              console.log('Could not read summary file:', e.message);
              summaryContent = 'Summary report could not be generated.';
            }
            
            // Create or update PR comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('<!-- recursive-action-scanner -->')
            );
            
            const commentBody = `<!-- recursive-action-scanner -->
            ## üîç Recursive Action Scanner Results
            
            ${summaryContent}
            
            ---
            *This comment was automatically generated by the Recursive Action Scanner*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
            }


      - name: Handle scan failure
        if: steps.scan.outputs.scan_success == 'false'
        run: |
          echo "::warning::No GitHub Actions found in markdown file changes or scan failed"
          echo "This is not necessarily an error - the PR may not contain action references."